Overview
========

*ggit* is a script to simplify working with both a .git and .svn repository in the same working directory.
For the most part, users can interact with git and subversion as they normally would.
*ggit* just tries to simplify the switching of branches and keeping both svn and git in sync when doing so.

In order to get commit history from svn into git, *ggit* relies on the git-svn too.
However, once the commits are in the git repository, git-svn is no longer needed.
This means if an admin can configure automatic pushes of svn commits (generated by git-svn) to a repository, *ggit* users do not need to install git-svn.

The only requirement on the repository to enable *ggit* svn functionality is that the repository has a branch which contains a file name ``config`` with remote-svn entries.
See the ggit-config_ section for more info on the config file.


Example Workflow
^^^^^^^^^^^^^^^^

Complete Workflow::

    # Clone the git-svn repository
    ggit clone http://landshark.ghs.com:8880/sean.wilson/rtosvc.git

    # Create a local version of the remote trunk branch
    git branch --track trunk origin/git-svn/trunk

    # Switch to the trunk branch
    ggit switch trunk

    # Both git status and svn status will work now.
    git status && svn status

    # Work in git as you usually would
    git checkout -b user/trunk/issue123 trunk
    echo code > new-important-file
    git add new-important-file
    git commit -m "Great functionality"
    git push -u origin


    #
    # *A new high-priority task comes in, we need to commit work to svn*
    #

    git stash --include-untracked

    # Create a working branch
    git switch trunk
    git checkout -b high-priority

    # * Do what it takes to fix the issue *

    # Now complete, we are ready to commit..
    # Create a difflist
    git diff trunk --name-only | tr '\n' ' ' > changelist

    # Ensure files are added,
    # NOTE: if directories are new, you'll manually need to add these.
    svn add --force $(cat changelist)
    svn ci $(cat changelist)

    # Now changes are committed to svn




User Comamnds
=============

clone
^^^^^

Clone is used to clone a git repository with git-svn branches and a special branch which contains the gitconfig.

Under the hood clone does the following:

1. Verifies the remote has a ggit-config branch.
   Use ``--config-branch <branch>`` to use a non-default branch.
2. Clone the git repository repository.
3. Run the Configure_ command in the new repository.
4. Optionally, fetch the branches from the git repository as remotes to enable git-svn.

switch
^^^^^^

**switch** is used to change both the git index and svn revision/url.

Under the hood it does the following:

1. Search for the git-svn commit message in the git log of hashish.
   Save the url and revision number.
2. Git checkout the given hashish.
3. Replace the symlinks in the .svn folder to those of the url from the git-svn log entry.
4. Run ``svn update`` to set the revision number of the repo to match the lastest git-svn commit on the hashish.

.. _configure:

configure
^^^^^^^^^

**configure** is a command used to read the gitconfig file from a branch and use the config to setup empty .svn repositories and git-svn fetch paths.

Under the hood it does the following:

1. Read the git-svn fetch information from ``config`` file at the root of the config branch.
   Use ``--config-branch <branch>`` to use a non-default branch.
2. Write the git-svn remote information from the config file into the .git/config.
3. ``svn checkout --depth=empty`` .svn folders for each of the different svn branches described in the config file.
4. Copy the contents of these folders into a path in ``.git/ggit/svn`` which corresponds to their url.
5. Finally, if the current HEAD (FETCH_HEAD if we just cloned) is a git-svn branch, setup the .svn path to match the latest git-svn commit.

sync
^^^^

**sync** will set the .svn repository to the same revision and url as the latest svn commit in the git repo.


Admin Commands
==============

Admin commands are commands used to simplify the creation of a functional ggit repository.
These commands assist in initialization of ggit repos as well to simplification of fetching and pushing git-svn commits.

init
^^^^

Initialize a git-svn repository.

The user should specify an svn url to base all branches off and follow that with ``<path>:<branch-name>`` pairs.

E.g::

    ggit init http://rtosvc trunk/rtos:trunk branches/ap/trunk/rtos:aptrunk branches/ap/rtos-i11.7/rtos:i11.7


Init tries to configure fetching of git-svn remotes in an intelligent way.
It will automatically preped a ``--remote-base`` of ``refs/remotes/git-svn/svn/`` to the <branch-name> component.
For the above command, git-svn will configure the git-svn svn-remote as follow::

    [svn-remote "svn"]
        fetch = trunk/rtos:refs/remotes/git-svn/svn/trunk
        fetch = branches/ap/trunk/rtos:refs/remotes/git-svn/svn/aptrunk
        fetch = branches/ap/i11.7/rtos:refs/remotes/git-svn/svn/i11.7
        url = file:///srv/svn


.. Note: Requries git-svn.

push
^^^^

Push the local git-svn repositories and config branch to a remote.

Currently this functionality is very limited and assumes a git-svn prefix of ``git-svn/`` is used for all local git-svn branches.
Effectively, it will::

    git push refs/remotes/git-svn/*:refs/heads/*


generate-ignore
^^^^^^^^^^^^^^^

.. Note: Requries git-svn.

Generate a gitignore string for all the externals and svn:ignore files and print it to standard out.


Advanced Details
================

git-svn
^^^^^^^

*ggit* alone isn't a solution to working with subversion in git.
*ggit* isn't advanced enough to craete commits from svn into git.
To automate this process use the perl tool, git-svn.
On ubuntu you can install git-svn from the git-svn package::

    sudo apt install git-svn


Repository Confguration
=======================

ggit-config
^^^^^^^^^^^

A *ggit* repository uses a configuration file to setup and manage git-svn branches.
The config uses the same format as the git config.
(Under the hood, the git config command is utilized.)
There are two required configuration attributes for svn-remotes.

* ``url`` is the base url for the subversion respoitory.
* ``fetch`` options specify different branches to create from the svn repository
  the format is::
      <path from svn root>:refs/remotes/<branch-name>

As a complete example::

    [svn-remote "svn"]
            url = http://rtosvc/
            fetch = trunk/rtos:refs/remotes/git-svn/trunk
            fetch = branches/ap/trunk/rtos:refs/remotes/git-svn/aptrunk
            fetch = branches/ap/i11.7/rtos:refs/remotes/git-svn/i11.7

This format is the exact format expected by the git-svn tool see the manpage for git-svn for additional information.

In order to clone a repository with *ggit*, a branch with a config file formatted as previously describe with in it.
The default branch name is ``ggit-config``, however the ``--config-branch`` flag can override this default.

BUGS
====

Cherry picking from a git-svn branch
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*ggit* looks at the latest git-svn commit in the log to find the svn url we are on.
Because of this you can run into issues when cherry-picking between git-svn branches.
To fix this issue, you will need to change cherry-picked commit messages to remove the git-svn tag.

For example::

    # We are on branch trunk and want to cherry pick the most recent commit from svn/devel
    git cherry-pick svn/devel

    # Edit the TODO LIST to "reword" for all commits
    git rebase -i HEAD^
     # or since we only cherry-picked a single commit, a git --amend would work as well.


.. Developer-Note:
    We could work around this issue by also peeking at the earliest git log message.
    However, if we do so, and a git-svn branch was rebased onto another (to
    show their related history) then we would run into the same issue without
    a simple workaround.
