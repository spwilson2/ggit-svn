Overview
========

ggit is a script to simplify working with both a .git and .svn repository in the same working directory.
For the most part, users can interact with git and subversion as they normally would.
ggit just tries to simplify the switching of branches and keeping both svn and git in sync when doing so.

In order to get commit history from svn into git, ggit relies on the git-svn too.
However, once the commits are in the git repository, git-svn is no longer needed.
This means if an admin can configure automatic pushes of svn commits (generated by git-svn) to a repository, ggit users do not need to install git-svn.

The only requirement on the repository to enable ggit svn functionality is that the repositiory has a branch which contains a file name ``config`` with remote-svn entries.
See the ggit-config_ section for more info on the config file.
The default branch name is ``ggit-config``, however the ``--config-branch`` flag can override this default.


Example Workflow
^^^^^^^^^^^^^^^^

Complete Workflow::

    # Clone the git-svn repository
    ggit clone http://landshark.ghs.com:8880/sean.wilson/rtosvc.git

    # Create a local version of the remote trunk branch
    git branch --track trunk origin/git-svn/trunk

    # Switch to the trunk branch
    ggit switch trunk

    # Both git status and svn status will work now.
    git status && svn status

    # Work in git as you usually would
    git checkout -b user/devel/trunk trunk
    echo code > new-important-file
    git add new-important-file
    git commit -m "Great functionality"
    git push -u origin

    # When you're ready make a large commit to subversion....
    # Create a file list of changes using git
    git diff origin/git-svn/trunk --name-only | tr '\n' ' ' > files

    # Ensure files are added, NOTE: if directories are new, you'll manually need to add these.
    svn add --force $(cat files)
    svn ci $(cat files)


Comamnds
========

Clone
^^^^^

Clone is used to clone a git repository with git-svn branches and a special branch which contains the gitconfig.

Under the hood clone does the following:

1. Verifies the remote has a *ggit-config* branch.
   Use ``--config-branch <branch>`` to use a non-default branch.
2. Clone the git repository repository.
3. Run the Configure_ command in the new repository.
4. Optionally, fetch the branches from the git repository as remotes to enable git-svn.

Switch
^^^^^^

Switch is used to change both the git index and svn revision/url.

Under the hood it does the following:

1. Search for the git-svn commit message in the git log of hashish.
   Save the url and revision number.
2. Git checkout the given hashish.
3. Replace the symlinks in the .svn folder to those of the url from the git-svn log entry.
4. Run svn update to set the revision number of the repo to match the lastest git-svn commit on the hashish.

:: _configure:

Configure
^^^^^^^^^

Configure is a command used to read the gitconfig file from a branch and use the config to setup empty .svn repositories and git-svn fetch paths.

Under the hood it does the following:

1. Read the git-svn fetch information from ``config`` file at the root of the config branch.
   Use ``--config-branch <branch>`` to use a non-default branch.
2. Write the git-svn remote information from the config file into the .git/config.
3. ``svn checkout --depth=empty`` .svn folders for each of the different svn branches described in the config file.
4. Copy the contents of these folders into a path in ``.git/ggit/svn`` which corresponds to their url.
5. Finally, if the current HEAD (FETCH_HEAD if we just cloned) is a git-svn branch, setup the .svn path to match the latest git-svn commit.

Sync
^^^^

Sync will set the .svn repository to the same revision and url as the latest svn commit in the git repo.


Repository Confguration
=======================

ggit-config
^^^^^^^^^^^

A ggit repository uses a configuration file to setup and manage git-svn branches.
The config uses the same format as the git config.
This file format closely resembles .ini/.toml files.

ggit will only look at svn-remote sections.


There are two required configuration attributes for svn-remotes.

* ``url`` is the base url for the subversion respoitory.
* ``fetch`` options specify different branches to create from the svn repository
  the format is::
      <path from svn root>:refs/remotes/<branch-name>

As a complete example::

    [svn-remote "svn"]
            url = http://rtosvc/
            fetch = trunk/rtos:refs/remotes/git-svn/trunk
            fetch = branches/ap/trunk/rtos:refs/remotes/git-svn/aptrunk
            fetch = branches/ap/i11.7/rtos:refs/remotes/git-svn/i11.7
