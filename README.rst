========
ggit-svn
========

..
    .. image:: https://img.shields.io/pypi/v/ggit.svg
	    :target: https://pypi.python.org/pypi/ggit
..
    .. image:: https://img.shields.io/travis/spwilson2/ggit.svg
	    :target: https://travis-ci.org/spwilson2/ggit-svn

..
    .. image:: https://readthedocs.org/projects/ggit/badge/?version=latest
        :target: https://ggit.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status

Overview
========

ggit is a script to simplify working with both a .git and .svn repository in the same working directory.
For the most part, users can interact with git and subversion as they normally would.
ggit simplifies switching branches and keeping both svn and git in sync when doing so.

That said, ggit strongly favors git users over svn.
Users should spend most of their development cycle working with a committing to git.
The main interaction with svn should be for a final commit or to cherry-pick svn merges not available in git.

ggit currently doesn't have support for saving svn properties when switching branches.
This means any ``svn:mergeinfo`` or custom svn properties will need to be restored before finally committing to svn.

In order to get commit history from svn into git, ggit relies on the git-svn tool.
However, once the commits are in the git repository, git-svn is no longer needed.
This means if an admin can configure automatic pushes of svn commits (generated by git-svn) to a repository, ggit users do not need to install git-svn.

ggit has minimal repo setup requirements.
The only repository requirement is there must be a branch which contains a file named ``config`` with remote-svn entries.
See the ggit-config_ section for more info on the ``config`` file.

Installation
^^^^^^^^^^^^

Installing ggit is simple and there are a couple ways to do so.
The easiest is to install via pip::

    pip install .

If you prefer to place ggit in a known path, you can copy the ``ggit.py`` file (located at ``ggit/ggit.py``).


Example Workflow
^^^^^^^^^^^^^^^^

Complete Workflow::

    # Clone the git-svn repository
    ggit clone http://landshark.ghs.com:8880/sean.wilson/rtosvc.git

    # Create a local version of the remote trunk branch
    git branch --track trunk origin/git-svn/trunk

    # Switch to the trunk branch
    ggit switch trunk

    # Both git status and svn status will work now.
    git status && svn status

    # Work in git as you usually would
    git checkout -b user/trunk/issue123 trunk
    echo code > new-important-file
    git add new-important-file
    git commit -m "Great functionality"
    git push -u origin user/trunk/issue123


Now, we've made a some progress on our feature.
We've pushed it to the repository so it's available for others and backed up in a working state.
However, a high-priority task now has come up.


Rather than creating a whole separate clone, we can now use git-svn::

    # Stash any unsaved changes
    git stash --include-untracked

    # Create a working branch
    git checkout -b high-priority trunk

    # Update the svn index to match trunk (NOTE, svn property changes will be lost)
    ggit sync

Now, on the temporary branch you can do what it takes to resolve the issue.
When you're ready to commit you should create a list of files you've changed and commit those files::

    # Create list of files changed
    git diff trunk --name-only > changelist

    # Ensure any new files are added,
    # NOTE: If there are new directories, you'll manually need to add these.
    svn add --force $(cat changelist)
    svn commit $(cat changelist)

Now files are committed to svn and you can delete your temporary branch and go back to work on your feature::

    # Return to our feature branch
    git checkout user/trunk/issue123

    # Force delete the branch since it is in svn and git won't realize it's "merged"
    git branch -D high-priority

    # Restore the .svn index to it's state on this branch.
    ggit sync


Additional Workflow Tips
^^^^^^^^^^^^^^^^^^^^^^^^


A common issue when switching branches is leftover untracked files from the previous branch.
A way to cleanup after doing so is to use ``git clean``.

To do this with ggit::

    git checkout other-branch
    # Remove untracked, and ignored files. (Including .svn)
    git clean -xfd
    # Restore the .svn folder, and set it to the revision known in git.
    ggit sync

User Comamnds
=============

clone
^^^^^

Clone is used to clone a git repository configured with git-svn branches and a special branch which contains the gitconfig.

Under the hood clone does the following:

1. Verifies the remote has a *ggit-config* branch.
2. Clone the git repository repository.
3. Run the Configure_ command in the new repository.
4. Optionally, fetch the branches from the git repository as remotes to enable git-svn.

switch
^^^^^^

Switch is used to change both the git index and svn revision/URL.

Under the hood it does the following:

1. Search for the git-svn commit message in the git log of hashish.
   Save the URL and revision number.
2. Git checkout the given hashish.
3. Replace the symlinks in the .svn folder to those of the URL from the git-svn log entry.
4. Run svn update to set the revision number of the repo to match the latest git-svn commit on the hashish.


Switch is effectively a wrapper around a ``git checkout`` followed by a  ``ggit sync``.

configure
^^^^^^^^^

Configure is a command used to read the gitconfig file from a branch and use the config to setup empty .svn repositories and git-svn fetch paths.

Under the hood it does the following:

1. Read the git-svn fetch information from ``config`` file at the root of the `config branch <nonstandard_config_branch_>`_.
2. Write the git-svn remote information from the config file into the .git/config.
3. ``svn checkout --depth=empty`` .svn folders for each of the different svn branches described in the config file.
4. Copy the contents of these folders into a path in ``.git/ggit/svn`` which corresponds to their URL.
5. Finally, if the current HEAD (FETCH_HEAD if we just cloned) is a git-svn branch, setup the .svn path to match the latest git-svn commit.


sync
^^^^

Sync will set the .svn repository to the same revision and URL as the latest svn commit in the git repo.
It will also restore the .svn folder if it is deleted (for example with a git clean).


Common Options
^^^^^^^^^^^^^^

Many of the commands share common options.

.. _nonstandard_config_branch:

============================    ================    ==========================================================
Option                          Commands            Description
----------------------------    ----------------    ----------------------------------------------------------

``--config-branch <branch>``    configure, clone    Use to select the config file from the non-default branch.
============================    ================    ==========================================================


Admin Commands
==============

Admin commands are commands used to simplify the creation of a functional ggit repository.
These commands assist in: initialization of ggit repos, generating gitignore content, and pushing git-svn commits.

init
^^^^

Initialize a git-svn repository.

The user should specify an svn url to base all branches off and follow that with <path>:<branch-name> pairs.

E.g::

    ggit init http://rtosvc trunk/rtos:trunk branches/ap/trunk/rtos:aptrunk branches/ap/rtos-i11.7/rtos:i11.7


Init tries to configure fetching of git-svn remotes in an intelligent way.
It will automatically preped a ``--remote-base`` of ``refs/remotes/git-svn/svn/`` to the <branch-name> component.
For the above command, git-svn will configure the git-svn svn-remote as follow::

    [svn-remote "svn"]
        fetch = trunk/rtos:refs/remotes/git-svn/svn/trunk
        fetch = branches/ap/trunk/rtos:refs/remotes/git-svn/svn/aptrunk
        fetch = branches/ap/i11.7/rtos:refs/remotes/git-svn/svn/i11.7
        url = file:///srv/svn


.. Note: Requries git-svn.

push
^^^^

Push the local git-svn repositories and config branch to a remote.

Currently this functionality is very limited and assumes a git-svn prefix of ``git-svn/`` is used for all local git-svn branches.
Effectively, it will::

    git push refs/remotes/git-svn/*:refs/heads/*


generate-ignore
^^^^^^^^^^^^^^^

.. Note: Requries git-svn.

Generate a gitignore string for all the externals and svn:ignore files and print it to standard out.
This is useful for automating the generation of gitignore commits on top of a git-svn repository.

E.g.::

    git checkout trunk
    git svn fetch
    git svn reset --hard git-svn/trunk

    ggit generate-ignore > .gitignore

    git add .gitignore
    git commit -m "Add autogenerated gitignore file."


Advanced Details
================

git-svn
^^^^^^^

ggit alone isn't a solution to working with subversion in git.
ggit isn't advanced enough to create commits from svn into git.
To automate this process use the perl tool, git-svn.
On ubuntu you can install git-svn from the git-svn package::

    sudo apt install git-svn


Repository Confguration
=======================

ggit-config
^^^^^^^^^^^

A ggit repository uses a configuration file to setup and manage git-svn branches.
The config uses the same format as the git config.
(Under the hood, the git config command is utilized.)
There are two required configuration attributes for svn-remotes.

* ``url`` is the base URL for the subversion repository.
* ``fetch`` options specify different branches to create from the svn repository
  the format is::

      <path from svn root>:refs/remotes/<branch-name>

As a complete example::

    [svn-remote "svn"]
            url = http://rtosvc/
            fetch = trunk/rtos:refs/remotes/git-svn/trunk
            fetch = branches/ap/trunk/rtos:refs/remotes/git-svn/aptrunk
            fetch = branches/ap/i11.7/rtos:refs/remotes/git-svn/i11.7

BUGS
====

Cherry picking from a git-svn branch
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ggit looks at the latest git-svn commit in the log to find the svn URL we are on.
Because of this you can run into issues when cherry-picking between git-svn branches.
To fix this issue, you will need to change cherry-picked commit messages to remove the git-svn tag.

For example::

    # We are on branch trunk and want to cherry pick the most recent commit from svn/devel
    git cherry-pick svn/devel

    # Edit the TODO LIST to "reword" for all commits
    git rebase -i HEAD^
     # or since we only cherry-picked a single commit, a git --amend would work as well.


.. Developer-Note:
    We could work around this issue by also peeking at the earliest git log message.
    However, if we do so, and a git-svn branch was rebased onto another (to
    show their related history) then we would run into the same issue without
    a simple workaround.



Credits
-------

This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.

.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage
